import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g  # Cost from the start node to the current node
        self.h = h  # Heuristic estimate from the current node to the goal
        self.f = g + h  # Total cost (f = g + h)

    def __lt__(self, other):
        return self.f < other.f

def astar(start, goal, heuristic):
    open_set = [Node(start, None, 0, heuristic(start, goal))]
    closed_set = set()

    while open_set:
        current_node = heapq.heappop(open_set)

        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.state)

        neighbors = get_neighbors(current_node.state)
        if neighbors is None:
            continue

        for neighbor in neighbors:
            if neighbor in closed_set:
                continue

            g = current_node.g + 1  # Assuming a cost of 1 to move between adjacent nodes
            h = heuristic(neighbor, goal)
            f = g + h
            new_node = Node(neighbor, current_node, g, h)

            if not any(node.f < f and node.state == neighbor for node in open_set):
                heapq.heappush(open_set, new_node)

    return None  # No path found

def get_neighbors(state):
    # Example: For a grid, return adjacent cells
    x, y = state
    grid_size = 5  # Adjust this based on your problem
    neighbors = []

    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            new_x, new_y = x + dx, y + dy
            if 0 <= new_x < grid_size and 0 <= new_y < grid_size:
                neighbors.append((new_x, new_y))

    return neighbors

def euclidean_distance(point1, point2):
    # Euclidean distance heuristic for A*
    x1, y1 = point1
    x2, y2 = point2
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

# Example usage:
start_point = (0, 0)
goal_point = (4, 4)
path = astar(start_point, goal_point, euclidean_distance)

if path:
    print("Path found:", path)
else:
    print("No path found.")
